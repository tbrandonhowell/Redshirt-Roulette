{"version":3,"sources":["Shuffle.js","Array.js","components/header.js","components/gamebody.js","App.js","serviceWorker.js","index.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","picArray","Header","props","react_default","a","createElement","id","className","yourScore","currentScore","src","alt","topScore","Gamebody","imageArray","map","item","key","width","spinStatus","onClick","catchAnswer","console","log","shuffledArray","slice","App","state","answersArray","scoreStyle","message","tempAnswersArray","_this","indexOf","push","tempTopScore","tempCurrentScore","setState","_this2","this","setTimeout","_this3","tempImageArray","header","gamebody","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba824dca.chunk.js","sourcesContent":["// https://gomakethings.com/how-to-shuffle-an-array-with-vanilla-js/\n\n/**\n * Randomly shuffle an array\n * https://stackoverflow.com/a/2450976/1293256\n * @param  {Array} array The array to shuffle\n * @return {String}      The first item in the shuffled array\n */\nvar shuffle = function (array) {\n\n\tvar currentIndex = array.length;\n\tvar temporaryValue, randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n\n};\n\n\nexport default shuffle;","let picArray = [\n\n    [1,\"1.jpg\"],\n    [2,\"2.jpg\"],\n    [3,\"3.jpg\"],\n    [4,\"4.jpg\"],\n    [5,\"5.jpg\"],\n    [6,\"6.jpg\"],\n    [7,\"7.jpg\"],\n    [8,\"8.jpg\"],\n    [9,\"9.jpg\"],\n    [10,\"10.jpg\"],\n    [11,\"11.jpg\"],\n    [12,\"12.jpg\"],\n\n]\n\nexport default picArray;","import React from \"react\";\n\nfunction Header (props) {\n    return (\n        <div id=\"header\" className=\"row\">\n            <div className=\"col s3\">\n                <h4 className={props.yourScore}>Your Score: {props.currentScore}</h4>\n            </div>\n            <div className=\"col s6\">\n                <img src=\"https://fontmeme.com/permalink/190427/a19c06ccfb80db6b487e3c53b349dd82.png\" alt=\"Redshirt Roulette\" id=\"logo\"/>\n            </div>\n            <div className=\"col s3\">\n                <h4>Top Score: {props.topScore}</h4>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from \"react\"\n\nfunction Gamebody (props) {\n\n    return (\n        <div id=\"gameBody\" className=\"row\"> \n            <div className=\"col s1\"></div>\n            <div className=\"col s10\">\n          {\n            props.imageArray.map(item => (\n              <img \n                key={item[0]} \n                src={\"./images/\" + item[1]} \n                alt=\"Redshirt\" \n                width=\"100\" \n                id={item[0]} \n                className={props.spinStatus} \n                onClick={() => props.catchAnswer(item[0])}\n              />\n            ))\n          }\n            </div>\n            <div className=\"col s1\"></div>\n        </div>\n    )\n}\n\nexport default Gamebody;\n\n\n\n","import React, { Component } from \"react\";\nimport './App.css';\nimport shuffle from './Shuffle'; // shuffle function from https://stackoverflow.com/a/2450976/1293256\nimport picArray from './Array'; // our array of image names and IDs\nimport Header from \"./components/header\";\nimport Gamebody from \"./components/gamebody\";\n\nconsole.log(\"picArray:\");\nconsole.log(picArray);\n\nvar shuffledArray = shuffle(picArray.slice());\n\nconsole.log(\"shuffledArray:\");\nconsole.log(shuffledArray);\n\n// const instance = M.Modal.getInstance(\"#modal1\")\n\nclass App extends Component {\n\n  state = {\n    imageArray: [],\n    answersArray: [],\n    currentScore: 0,\n    topScore: 0,\n    scoreStyle: \"\",\n    spinStatus: \"guess\",\n    message: \"Click on a Redshirt to earn points, but don't click on any Redshirt more than once!\"\n  }\n\n  componentDidMount() {\n    this.setState({imageArray: shuffledArray});\n  }\n\n  catchAnswer = (id) => {\n    console.log(id);\n    let tempAnswersArray = this.state.answersArray;\n    if (this.state.answersArray.indexOf(id) === -1) {\n      console.log(\"correct answer\");\n      tempAnswersArray.push(id);\n      let tempCurrentScore = this.state.currentScore + 1;\n      let tempTopScore;\n      if ( (this.state.currentScore + 1) > this.state.topScore ) {\n        tempTopScore = this.state.currentScore + 1\n      } else {\n        tempTopScore = this.state.topScore\n      }\n      this.setState({\n        answersArray: tempAnswersArray,\n        currentScore: tempCurrentScore,\n        topScore: tempTopScore,\n        scoreStyle: \"correct\",\n        spinStatus: \"guess\",\n        message: \"Click on a Redshirt to earn points, but don't click on any Redshirt more than once!\"\n      },function(){\n        console.log(\"this.state.answersArray:\");\n        console.log(this.state.answersArray);\n        setTimeout( () => {\n          this.setState({\n            scoreStyle: \"\"\n          })\n        },200)\n      });\n    } else {\n      console.log(\"incorrect answer\");\n      tempAnswersArray = [];\n      this.setState({\n        answersArray: tempAnswersArray,\n        currentScore: 0,\n        scoreStyle: \"incorrect\",\n        spinStatus: \"guess-wrong\",\n        message: \"You clicked the same Redshirt twice! Try Again.\"\n      },function(){\n        console.log(\"this.state.answersArray:\");\n        console.log(this.state.answersArray);\n        setTimeout( () => {\n          this.setState({\n            scoreStyle: \"incorrect-post\"\n          })\n        },200)\n      });\n    }\n    let tempImageArray = shuffle(this.state.imageArray.slice());\n    this.setState({imageArray: tempImageArray});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          yourScore={this.state.scoreStyle}\n        />\n        <div id=\"second-header\">\n          <h5>{this.state.message}</h5>\n        </div>\n        <Gamebody\n          imageArray = {this.state.imageArray}\n          catchAnswer = {this.catchAnswer}\n          spinStatus = {this.state.spinStatus}\n        />\n        <div id=\"footer\">\n          <p>Built with <a href=\"https://reactjs.org/\">React</a> | Logo Created with <a href=\"https://fontmeme.com/star-trek-font/\">FontMeme</a> | Created by <a href=\"http://brandonhowell.com\">Brandon Howell</a> | GitHub <a href=\"https://github.com/tbrandonhowell/Redshirt-Roulette\">Repo</a></p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}